[{"C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\index.js":"1","C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\App.js":"2","C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\reportWebVitals.js":"3","C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\components\\books\\Books.js":"4","C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\components\\login\\Login.js":"5","C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\components\\navbar\\Navbar.js":"6","C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\components\\student\\Student.js":"7"},{"size":409,"mtime":1686819998534,"results":"8","hashOfConfig":"9"},{"size":596,"mtime":1686994113888,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1686819031636,"results":"11","hashOfConfig":"9"},{"size":5941,"mtime":1686819465460,"results":"12","hashOfConfig":"9"},{"size":1701,"mtime":1686819915427,"results":"13","hashOfConfig":"9"},{"size":1166,"mtime":1686997767807,"results":"14","hashOfConfig":"9"},{"size":3935,"mtime":1686995853756,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1e4u7l9",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\index.js",[],[],"C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\App.js",["39"],[],"C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\components\\books\\Books.js",["40"],[],"import React, { useState } from 'react';\r\nimport './Books.css';\r\nimport Navbar from '../navbar/Navbar';\r\nimport '../navbar/Navbar.css';\r\n\r\nconst Books = () => {\r\n  const [books, setBooks] = useState([]);\r\n  const [selectedGenre, setSelectedGenre] = useState('');\r\n  const [title, setTitle] = useState('');\r\n  const [author, setAuthor] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [code, setCode] = useState('');\r\n  const [selectedBookIndex, setSelectedBookIndex] = useState(null);\r\n\r\n  // Function to handle adding or updating a book\r\n  const addOrUpdateBook = () => {\r\n    if (selectedBookIndex !== null) {\r\n      // Update existing book\r\n      const updatedBook = {\r\n        title,\r\n        author,\r\n        description,\r\n        code,\r\n        genre: selectedGenre,\r\n      };\r\n      const updatedBooks = [...books];\r\n      updatedBooks[selectedBookIndex] = updatedBook;\r\n      setBooks(updatedBooks);\r\n      setSelectedBookIndex(null);\r\n    } else {\r\n      // Add new book\r\n      const newBook = {\r\n        title,\r\n        author,\r\n        description,\r\n        code,\r\n        genre: selectedGenre,\r\n      };\r\n      setBooks([...books, newBook]);\r\n    }\r\n    // Clear form inputs\r\n    setTitle('');\r\n    setAuthor('');\r\n    setDescription('');\r\n    setCode('');\r\n    setSelectedGenre('');\r\n  };\r\n\r\n  // Function to handle selecting a genre\r\n  const selectGenre = (genre) => {\r\n    setSelectedGenre(genre);\r\n  };\r\n\r\n  // Function to handle deleting a book\r\n  const deleteBook = (index) => {\r\n    const updatedBooks = [...books];\r\n    updatedBooks.splice(index, 1);\r\n    setBooks(updatedBooks);\r\n  };\r\n\r\n  // Function to handle editing a book\r\n  const editBook = (index) => {\r\n    const bookToEdit = books[index];\r\n    setTitle(bookToEdit.title);\r\n    setAuthor(bookToEdit.author);\r\n    setDescription(bookToEdit.description);\r\n    setCode(bookToEdit.code);\r\n    setSelectedGenre(bookToEdit.genre);\r\n    setSelectedBookIndex(index);\r\n  };\r\n\r\n  const genres = [\r\n    'All Books',\r\n    'Adventure',\r\n    'Mystery',\r\n    'Fantasy',\r\n    'Romance',\r\n    'Sci-Fi',\r\n    'History',\r\n    'Poetry',\r\n    'Children',\r\n  ];\r\n\r\n  return (\r\n    <div className=\"books-page\">\r\n      <h1 className=\"page-title\">Books Page</h1>\r\n\r\n      <div className=\"buttons\">\r\n        <div className=\"genres-button\">\r\n          Genres\r\n          <div className=\"genres-dropdown\">\r\n            {genres.map((genre, index) => (\r\n              <button\r\n                key={index}\r\n                className={selectedGenre === genre ? 'active' : ''}\r\n                onClick={() => selectGenre(genre)}\r\n              >\r\n                {genre}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <button className=\"add-book-button\" onClick={addOrUpdateBook}>\r\n          {selectedBookIndex !== null ? 'Update Book' : 'Add Book'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Add Book Form */}\r\n      <div className=\"add-book-form\">\r\n        <h2>{selectedBookIndex !== null ? 'Edit Book' : 'Add Book'}</h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Book Title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Book Author\"\r\n          value={author}\r\n          onChange={(e) => setAuthor(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Book Description\"\r\n          value={description}\r\n          onChange={(e) => setDescription(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Book Code\"\r\n          value={code}\r\n          onChange={(e) => setCode(e.target.value)}\r\n        />\r\n        <div className=\"genre-dropdown\">\r\n          <label htmlFor=\"genre-select\">Genre:</label>\r\n          <select\r\n            id=\"genre-select\"\r\n            value={selectedGenre}\r\n            onChange={(e) => setSelectedGenre(e.target.value)}\r\n          >\r\n            <option value=\"\">Select Genre</option>\r\n            {genres.map((genre, index) => (\r\n              <option key={index} value={genre}>\r\n                {genre}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* View Books */}\r\n      <div className=\"table\">\r\n        <div className=\"table-row table-header\">\r\n          <div className=\"table-cell\">Book Title</div>\r\n          <div className=\"table-cell\">Book Author</div>\r\n          <div className=\"table-cell\">Book Description</div>\r\n          <div className=\"table-cell\">Book Code</div>\r\n          <div className=\"table-cell\">Genre</div>\r\n          <div className=\"table-cell\">Actions</div>\r\n        </div>\r\n        <div className=\"table-body\">\r\n          {books.length > 0 ? (\r\n            books.map((book, index) => {\r\n              if (\r\n                selectedGenre === '' ||\r\n                selectedGenre === 'All Books' ||\r\n                selectedGenre === book.genre\r\n              ) {\r\n                return (\r\n                  <div className=\"table-row\" key={index}>\r\n                    <div className=\"table-cell\">{book.title}</div>\r\n                    <div className=\"table-cell\">{book.author}</div>\r\n                    <div className=\"table-cell\">{book.description}</div>\r\n                    <div className=\"table-cell\">{book.code}</div>\r\n                    <div className=\"table-cell\">{book.genre}</div>\r\n                    <div className=\"table-cell\">\r\n                      <button onClick={() => deleteBook(index)}>Delete</button>\r\n                      <button onClick={() => editBook(index)}>Edit</button>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              } else {\r\n                return null;\r\n              }\r\n            })\r\n          ) : (\r\n            <p>No books found.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Books;\r\n","C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\components\\login\\Login.js",[],[],"C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\components\\navbar\\Navbar.js",[],[],"C:\\Users\\ADITI\\OneDrive\\Desktop\\Alohomora\\userinterface\\src\\components\\student\\Student.js",[],[],{"ruleId":"41","severity":1,"message":"42","line":2,"column":27,"nodeType":"43","messageId":"44","endLine":2,"endColumn":33},{"ruleId":"41","severity":1,"message":"45","line":3,"column":8,"nodeType":"43","messageId":"44","endLine":3,"endColumn":14},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used."]